#Nginx所用用户和组，window下不指定
#user  nobody;

#工作的子进程数量（通常等于CPU数量或者2倍于CPU）
worker_processes  2;

#错误日志存放路径
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#指定pid存放文件
pid        logs/nginx.pid;


events {
    #使用网络IO模型linux建议epoll，FreeBSD建议采用kqueue，window下不指定。  
    #use epoll;  
    #允许最大连接数
    worker_connections  2048;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #定义日志格式 
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    #sendfile        on;
    #tcp_nopush     on;
 
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #gzip  on; 开启或关闭gzip模块(on/off)
    #gzip_min_length  2k;
    #gzip_buffers  16 64k; 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。4 16k代表以16k为单位，安装原始数据大小以16k为单位的4倍申请内存。
    #gzip_http_version  1.1;
    #gzip_comp_level  6;gzip压缩比，1压缩比最小处理速度最快，9压缩比最大但处理速度最慢(传输快但比较消耗cpu)
    #gzip_types  text/plain application/x-javascript text/css application/xml;
    #gzip_vary  on;和http头有关系，加个vary头，给代理服务器用的，有的浏览器支持压缩，有的不支持，所以避免浪费不支持的也压缩，所以根据客户端的HTTP头来判断，是否需要压缩

    access_log     logs/access.log;

    client_header_timeout     3m;
    client_body_timeout     3m;
    send_timeout     3m;
    
    #请求头缓存大小
    client_header_buffer_size     2k;
    #最大请求头缓存大小
    large_client_header_buffers     4 32k;
    
    
    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay     on;

    include gzip.conf;#启动数据压缩
    include   proxy.conf;
    
    upstream localhost80 {
        server localhost:8080 weight=1;
    }
    
    
    server {
        listen       80;
        server_name  www.ibooker.cc;

        charset utf-8;

        #access_log  logs/host.access.log  main;

        root "C:/tomcat/webapps";

        #location / {
        #    root   html;
        #    index  index.html index.htm;
        #}

        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
	
	location ~ ^/(WEB-INF)/ {
	    deny   all;
	}

	#此部分主要是dwr的js有写是服务器动态生成的，不能交给nginx处理，这样会出现404，需要单独处理并交给服务器处理。
	location /ibooker/dwr/ {
	    proxy_pass   http://localhost80/ibooker/dwr/;
	}

	#其他的静态文件处理都交给nginx处理
	location ~ \.(htm|html|gif|jpg|jpeg|png|ico|rar|css|js|zip|txt|flv|swf|doc|ppt|xls|pdf)$ {
	    root C:/tomcat/webapps/ibooker;
	    access_log   off;
	    expires   7d;
        }

	location /ibooker/ {
	#    proxy_connect_timeout   3;
	#    proxy_send_timeout   30;
	#    proxy_read_timeout   30;
	#    proxy_pass   http://localhost80/ibooker/;

	    proxy_connect_timeout   3;
	    proxy_send_timeout   30;
	    proxy_read_timeout   30;

	    proxy_pass   http://localhost80/;
	#    proxy_pass   http://localhost80/ibooker/;
        #    proxy_cookie_path   /ibooker/ /;
            proxy_set_header   Host    $host:$server_port;
            proxy_set_header   X-Real-IP   $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
	}

	#location ~ \.(jsp|do|action)$ {
	#    proxy_connect_timeout   3;
	#    proxy_send_timeout   30;
	#    proxy_read_timeout   30;
	#    proxy_pass   http://localhost;
	#}

	
	#访问根目录下的路径也就是webapp，默认跳转到ibooker项目的路径下，也就是跳转到上面的路径
	location / {
	#    rewrite (.*)$ /ibooker$1 permanent;

	    proxy_pass   http://localhost80/;
	#    proxy_pass   http://localhost80/ibooker/;
        #    proxy_cookie_path   /ibooker/ /;
            proxy_set_header   Host    $host:$server_port;
            proxy_set_header   X-Real-IP   $remote_addr;
            proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
	}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
